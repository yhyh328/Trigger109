pipeline {
    agent any  // 모든 빌드 에이전트에서 파이프라인이 실행될 수 있도록 설정

    // 파이프라인에서 사용될 환경 변수 선언
    environment {
        REPO = "s10-final/S10P31C109"  // 원격 저장소 식별자, 새 프로젝트의 저장소 URL로 변경 필요
    }

    stages {
        stage('Checkout') {  // 소스 코드 체크아웃 단계
            steps {
                checkout scm  // 현재 Jenkins 작업에 설정된 SCM(소스 코드 관리)에서 최신 코드를 체크아웃
            }
        }
        stage('Setup Environment') {  // 환경 설정 단계
            steps {
                // 지정된 디렉토리로 이동
                dir("${env.WORKSPACE}/back"){
                    withCredentials([file(credentialsId: 'application', variable: 'application')]) {
//                        sh "cat ./src/main/resources/application.yml"  // 설정 파일 내용 출력
                       sh 'cp ${application}  src/main/resources/application.yml' // jenkins 글로벌 변수로 yml 파일을 등록해서 사용
                    }
                    script {
                        sh "ls -al"  // 현재 디렉토리의 파일 리스트 출력
                        sh "echo 'SUBMODULE CHECK'"  // 서브모듈 체크 메시지 출력
                        sh "ls ./src/main/resources"  // 리소스 디렉토리의 파일 리스트 출력
                        sh "chmod +x ./gradlew"  // gradlew 파일 실행 권한 부여
//                         sh "cat ./src/main/resources/application.yml"  // 설정 파일 내용 출력
                    }
                }
            }
        }
        stage("Build") {  // 빌드 단계
            steps {
                script {
                    sh "ls -al"
                    // Docker Hub에 로그인하기 위한 자격증명 사용
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
//                         echo "도커허브 아이디: ${DOCKER_USER_ID}"
//                         echo "도커허브 비밀번호: ${DOCKER_USER_PASSWORD}"
                        sh "docker build --no-cache -t ${DOCKER_USER_ID}/back back"  // Docker 이미지 빌드, 이미지 이름 변경 필요
                    }
                }
            }
        }

        stage("Login") {  // Docker Hub 로그인 단계
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }

        stage("Tag and Push") {  // 이미지 태깅 및 푸시 단계
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKER_USER_ID}/back"  // Docker 이미지 푸시, 이미지 이름 변경 필요
                    }
                }
            }
        }

        stage('Prune old images'){  // 오래된 이미지 정리 단계
            steps{
                script{
                    sh "docker ps"
                    // sh "docker system prune --filter until=10h"  // 필요한 경우 주석 해제
                }
            }
        }

        stage('Pull') {  // 이미지 풀 단계
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        // 이전 이미지 관리 명령어 필요시 주석 해제
                        // sh "docker stop back || true"
                        // sh "docker rm back || true"
                        // sh "docker rmi hyeiiin/back"
                        // sh "docker pull ${DOCKER_USER_ID}/back"
                    }
                }
            }
        }
 stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try {
                            sh "docker stop back || true"
                            sh "docker rm -f back || true"
                            sh "docker rmi back || true"
                            sh "docker run -d --name back -p 8082:8080 -e db_url -e db_password ${DOCKER_USER_ID}/back"
//                             sh "docker run -d --name back -p 8082:8080 -e DB_URL=${env.DB_URL} -e DB_USER=${env.DB_USER} -e DB_PASSWORD=${env.DB_PASSWORD} -e REDIS_HOST=${env.REDIS_HOST} -e REDIS_PASSWORD=${env.REDIS_PASSWORD} -e REDIS_PORT=${env.REDIS_PORT} -e KAKAO_ID=${env.KAKAO_ID} -e KAKAO_REDIRECT_URI=${env.KAKAO_REDIRECT_URI} -e KAKAO_PW=${env.KAKAO_PW} -e S3_ACCESS_KEY=${env.S3_ACCESS_KEY} -e S3_SECRET_KEY=${env.S3_SECRET_KEY} -e S3_REGION=${env.S3_REGION} -e S3_BUCKET=${env.S3_BUCKET} ${DOCKER_USER_ID}/back && docker ps"
                        } catch (Exception e) {
                            sh "docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }
    }

//     post {  // 배포 후 알림 단계
//         success {
//             script {
//                 mattermostSend (color: 'good',
//                 message: "BE 배포 성공   :cat_jump: :loopy_happy: :bboong: ",
//                 )
//             }
//         }
//         failure {
//             script {
//                 mattermostSend (color: 'danger',
//                 message: "BE 배포 실패   :cry_tom: :cryingloopy: :cryingpatamon: "
//                 )
//             }
//         }
//     }
}
